Exercise 1: DVD Rental
Instructions
Get a list of all film languages.

select name from language

Get a list of all films joined with their languages – select the following details : film title, description, and language name. Try your query with different joins:

select film.title,film.description,language.name
from film
inner join language on film.language_id=language.language_id

Get all films, even if they don’t have languages.

select film.title,film.description,language.name
from film
left outer join language on film.language_id=language.language_id

Get all languages, even if there are no films in those languages.

select film.title,film.description,language.name
from film
right outer join language on film.language_id=language.language_id

Create a new table called new_film with the following columns : id, name. Add some new films to the table.

CREATE TABLE new_film(
 id SERIAL PRIMARY KEY,
 name VARCHAR (50)
)

INSERT INTO new_film (name)
VALUES
('Back to the Future'),
('Enola Holmes'),
('Harry Potter 1');

Create a new table called customer_review, which will contain film reviews that customers will make.
Think about the DELETE constraint: if a film is deleted, it’s review should be automatically deleted.
It should have the following columns:
review_id – a primary key, non null, auto-increment.
film_id – references the new_film table. The film that is being reviewed.
language_id – references the language table. What language the review is in.
title – the title of the review.
score – the rating of the review (1-10).
review_text – the text of the review. No limit on the length.
last_update – when the review was last updated.

create table customer_review(
  review_id serial primary key not null,
  film_id smallint references new_film (id) on delete cascade,
  language_id smallint,
  title varchar (100),
  score smallint check (score between 1 and 10),
  review_text text,
  last_update date,
  foreign key (film_id) references new_film(id),
  foreign key (language_id) references language(language_id) 
)

Add 2 movie reviews. Make sure you link them to valid objects in the other tables.

INSERT INTO customer_review (film_id,language_id,title,score,review_text,last_update)
VALUES
(1,1,'The Greatest Movie I Ever Saw',10,'You should definitely go see this movie if you want adventure and thrills. I loved it!','2021-05-11'),
(2,1,'Waster of Time!',1,'This was the biggest wate of time. I would have been better off taking a nap. Dont bother','2021-05-11');

Delete a film that has a review from the new_film table, what happens to the customer_review table?

delete from new_film where id=1

Exercise 2 : DVD Rental
Instructions
Use UPDATE to change the language of some films. Make sure that you use valid languages.

 update film
 set language_id = 3
 where rental_duration = 3; 

Which foreign keys (references) are defined for the customer table? How does this affect the way in which we INSERT into the customer table?

customer_address

We created a new table called customer_review. Drop this table. Is this an easy step, or does it need extra checking?

drop table customer_review

Find out how many rentals are still outstanding (ie. have not been returned to the store yet).

select count(*) from rental
where return_date is null

Find the 30 most expensive movies which are outstanding (ie. have not been returned to the store yet)

select title from film
inner join inventory on inventory.film_id=film.film_id
inner join rental on rental.inventory_id=inventory.inventory_id
where rental.return_date is null order by replacement_cost desc limit 30

Your friend is at the store, and decides to rent a movie. He knows he wants to see 4 movies, but he can’t remember their names. Can you help him find which movies he wants to rent?
The 1st film : The film is about a sumo wrestler, and one of the actors is Penelope Monroe.

select title from film
inner join film_actor on film_actor.film_id=film.film_id
inner join actor on actor.actor_id=film_actor.actor_id
where description like '%Sumo%' and actor.first_name='Penelope' and actor.last_name='Monroe'


The 2nd film : A short documentary (less than 1 hour long), rated “R”.

select title from film
inner join film_category on film.film_id=film_category.film_id
inner join category on category.category_id=film_category.category_id
where length<60 and rating='R' and category.name='Documentary'

The 3rd film : A film that his friend Matthew Mahan rented. He paid over $4.00 for the rental, and he returned it between the 28th of July and the 1st of August, 2005.

select title from film
inner join inventory on inventory.film_id=film.film_id
inner join rental on rental.inventory_id=inventory.inventory_id
inner join customer on customer.customer_id=rental.customer_id
where customer.first_name='Matthew' and customer.last_name='Mahan' and rental_rate>4 and rental.return_date>'2005-07-28' and rental.return_date<'2005-08-01'

The 4th film : His friend Matthew Mahan watched this film, as well. It had the word “boat” in the title or description, and it looked like it was a very expensive DVD to replace.

select title from film
inner join inventory on inventory.film_id=film.film_id
inner join rental on rental.inventory_id=inventory.inventory_id
inner join customer on customer.customer_id=rental.customer_id
where customer.first_name='Matthew' and customer.last_name='Mahan' and (title like '%Boat%' or description like '%Boat%') order by replacement_cost desc limit 2
